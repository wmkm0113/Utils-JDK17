/*
 * Licensed to the Nervousync Studio (NSYC) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nervousync.http.entity;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.nervousync.enumerations.web.HttpMethodOption;
import org.nervousync.utils.FileUtils;
import org.nervousync.utils.LoggerUtils;
import org.nervousync.utils.StringUtils;

import org.nervousync.commons.Globals;

/**
 * <h2 class="en">Http Entity Define</h2>
 * <h2 class="zh-CN">HTTP请求信息定义</h2>
 *
 * @author Steven Wee	<a href="mailto:wmkm0113@Hotmail.com">wmkm0113@Hotmail.com</a>
 * @version $Revision: 1.0 $ $Date: Jan 2, 2018 14:05:04 $
 */
public final class HttpEntity {
	/**
	 * <span class="en">Boundary string used characters</span>
	 * <span class="zh-CN">Boundary字符串使用的字符数组</span>
	 */
	private static final char[] BOUNDARY_CHAR_ARRAY = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
	/**
	 * <span class="en">Logger instance</span>
	 * <span class="zh-CN">日志对象</span>
	 */
	private final LoggerUtils.Logger logger = LoggerUtils.getLogger(this.getClass());
	
	/**
	 * <span class="en">Boundary value, generated by system</span>
	 * <span class="zh-CN">Boundary值，由系统自动生成</span>
	 */
	private String boundary = null;
	/**
	 * <span class="en">EntityInfo instance list</span>
	 * <span class="zh-CN">EntityInfo实例对象列表</span>
	 * @see HttpEntity.EntityInfo
	 */
	private final List<EntityInfo> entityList;
	/**
	 * <span class="en">Is multipart request</span>
	 * <span class="zh-CN">多媒体请求状态</span>
	 */
	private boolean multipart = Boolean.FALSE;
	/**
	 * <span class="en">Is mixed parameters, means include form field and upload files</span>
	 * <span class="zh-CN">混合数据类型，表示数据中包含表单项和上传文件</span>
	 */
	private boolean mixed = Boolean.FALSE;
	/**
	 * <h3 class="en">Constructor method for HttpEntity</h3>
	 * <h3 class="zh-CN">HttpEntity构造方法</h3>
	 */
	public HttpEntity() {
		this.entityList = new ArrayList<>();
	}
	/**
	 * <h3 class="en">Add text parameter</h3>
	 * <h3 class="zh-CN">添加文本参数</h3>
	 *
	 * @param name 		<span class="en">parameter name</span>
     * 					<span class="zh-CN">参数名</span>
	 * @param value 	<span class="en">parameter value</span>
     * 					<span class="zh-CN">参数值</span>
	 */
	public void addTextEntity(final String name, final String value) {
		this.entityList.add(EntityInfo.generateTextEntity(name, value));
	}
	/**
	 * <h3 class="en">Add upload file parameter</h3>
	 * <h3 class="zh-CN">添加上传文件参数</h3>
	 *
	 * @param name 		<span class="en">parameter name</span>
     * 					<span class="zh-CN">参数名</span>
	 * @param value		<span class="en">The upload file path</span>
     * 					<span class="zh-CN">上传文件地址</span>
	 */
	public void addBinaryEntity(final String name, final String value) {
		try {
			this.entityList.add(EntityInfo.generateBinaryEntity(name, value));
			if (this.boundary == null) {
				this.boundary = this.generateBoundary();
			}
		} catch (FileNotFoundException e) {
			this.logger.error("Utils", "Upload_File_Not_Found_Error");
			if (this.logger.isDebugEnabled()) {
				this.logger.debug("Utils", "Stack_Message_Error", e);
			}
		}
	}
	/**
	 * <h3 class="en">Generate content type value</h3>
	 * <h3 class="zh-CN">生成媒体类型信息</h3>
	 *
	 * @param charset			<span class="en">Charset encoding</span>
	 *                          <span class="zh-CN">字符编码集</span>
	 * @param methodOption		<span class="en">HTTP method option Enumerations</span>
	 *                          <span class="zh-CN">HTTP请求方法枚举</span>
	 * @see org.nervousync.enumerations.web.HttpMethodOption
	 *
	 * @return 	<span class="en">Generated content type string</span>
	 * 			<span class="zh-CN">生成的媒体类型信息</span>
	 * @throws UnsupportedEncodingException
	 * <span class="en">If charset encoding is not supported</span>
	 * <span class="zh-CN">如果字符编码集不被支持</span>
	 */
	public String generateContentType(final String charset, final HttpMethodOption methodOption)
			throws UnsupportedEncodingException {
		String charsetEncoding = StringUtils.notBlank(charset) ? charset : "ISO-8859-1";
		String contentType;
		switch (methodOption) {
			case POST, PUT -> {
				this.checkType();
				if (this.multipart) {
					if (this.mixed) {
						contentType = Globals.DEFAULT_CONTENT_TYPE_MIXED + ";boundary=" + this.boundary;
					} else {
						contentType = Globals.FORM_DATA_CONTENT_TYPE_MULTIPART + ";boundary=" + this.boundary;
					}
				} else {
					contentType = Globals.DEFAULT_CONTENT_TYPE_ENCODED + ";charset=" + charsetEncoding;
				}
			}
			case GET, TRACE, HEAD, DELETE, OPTIONS ->
					contentType = Globals.DEFAULT_CONTENT_TYPE_TEXT + ";charset=" + charsetEncoding;
			default -> throw new UnsupportedEncodingException("Unknown Request Method");
		}
		
		return contentType;
	}
	/**
	 * <h3 class="en">Write data to output stream</h3>
	 * <h3 class="zh-CN">将数据写到输出流中</h3>
	 *
	 * @param charset			<span class="en">Charset encoding</span>
	 *                          <span class="zh-CN">字符编码集</span>
	 * @param outputStream		<span class="en">Target output stream</span>
	 *                          <span class="zh-CN">目标输出流</span>
	 *
	 * @throws IOException
	 * <span class="en">If an error occurs when write data to output stream</span>
	 * <span class="zh-CN">当写入数据到输出流中捕获异常</span>
	 */
	public void writeData(final String charset, final OutputStream outputStream) throws IOException {
		if (this.entityList.isEmpty()) {
			if (this.logger.isDebugEnabled()) {
				this.logger.debug("Utils", "Entity_List_Empty_Debug");
			}
			return;
		}
		String charsetEncoding = StringUtils.notBlank(charset) ? charset : Globals.DEFAULT_ENCODING;
		this.checkType();
		if (this.multipart) {
			StringBuilder stringBuilder;
			for (EntityInfo entityInfo : this.entityList) {
				stringBuilder = new StringBuilder();
				stringBuilder.append("--").append(this.boundary).append(FileUtils.CRLF);
				stringBuilder.append("Content-Disposition:" + Globals.FORM_DATA_CONTENT_DISPOSITION + ";");
				stringBuilder.append("name=\"").append(entityInfo.getEntityName()).append("\"");
				String value = entityInfo.getEntityValue();
				if (entityInfo.isBinary()) {
					stringBuilder.append(";filename=\"").append(StringUtils.getFilename(value)).append("\"");
					stringBuilder.append(FileUtils.CRLF);
					stringBuilder.append("Content-Type:" + Globals.DEFAULT_CONTENT_TYPE_BINARY);
				}
				stringBuilder.append(FileUtils.CRLF);
				stringBuilder.append(FileUtils.CRLF);
				
				outputStream.write(stringBuilder.toString().getBytes(Globals.DEFAULT_ENCODING));
				if (entityInfo.isBinary()) {
					outputStream.write(FileUtils.readFileBytes(value));
				} else {
					outputStream.write(value.getBytes(charsetEncoding));
				}
				outputStream.write(FileUtils.CRLF.getBytes(charsetEncoding));
			}
			outputStream.write(("--" + this.boundary).getBytes(charsetEncoding));
		} else {
			StringBuilder stringBuilder = new StringBuilder();
			for (EntityInfo entityInfo : this.entityList) {
				stringBuilder.append("&");
				stringBuilder.append(URLEncoder.encode(entityInfo.getEntityName(), charsetEncoding));
				stringBuilder.append("=");
				stringBuilder.append(URLEncoder.encode(entityInfo.getEntityValue(), charsetEncoding));
			}
			
			if (this.logger.isDebugEnabled()) {
				this.logger.debug("Utils", "Write_Request_Data_Debug", stringBuilder);
			}
			outputStream.write(stringBuilder.substring(1).getBytes(charsetEncoding));
		}
	}
	/**
	 * <h3 class="en">Check entity information, configure multipart and mixed value</h3>
	 * <h3 class="zh-CN">检查当前的信息，设置multipart和mixed值</h3>
	 */
	private void checkType() {
		int formItemCount = 0;
		int fileItemCount = 0;
		for (EntityInfo entityInfo : this.entityList) {
			if (entityInfo.isBinary()) {
				fileItemCount++;
			} else {
				formItemCount++;
			}
		}
		if (fileItemCount > 0) {
			this.multipart = Boolean.TRUE;
			if (formItemCount > 0) {
				this.mixed = Boolean.TRUE;
			}
		}
	}
	/**
	 * <h3 class="en">Generate random boundary string</h3>
	 * <h3 class="zh-CN">生成随机Boundary字符串</h3>
	 *
	 * @return 	<span class="en">Generated string</span>
	 * 			<span class="zh-CN">生成的字符串</span>
	 */
	private String generateBoundary() {
		StringBuilder stringBuilder = new StringBuilder();
		final Random random = new Random();
		for (int i = 0 ; i < 32 ; i++) {
			stringBuilder.append(BOUNDARY_CHAR_ARRAY[random.nextInt(BOUNDARY_CHAR_ARRAY.length)]);
		}
		return stringBuilder.toString();
	}
	/**
	 * <h2 class="en">Http Entity Information Define</h2>
	 * <h2 class="zh-CN">HTTP请求参数信息定义</h2>
	 *
	 * @author Steven Wee	<a href="mailto:wmkm0113@Hotmail.com">wmkm0113@Hotmail.com</a>
	 * @version $Revision: 1.0 $ $Date: Jul 2, 2018 14:08:33 $
	 */
	private static final class EntityInfo {
		/**
		 * <span class="en">Binary data status</span>
		 * <span class="zh-CN">二进制数据状态</span>
		 */
		private final boolean binary;
		/**
		 * <span class="en">Entity name</span>
		 * <span class="zh-CN">参数名</span>
		 */
		private final String entityName;
		/**
		 * <span class="en">Entity value</span>
		 * <span class="zh-CN">参数值</span>
		 */
		private final String entityValue;
		/**
		 * <h3 class="en">Private constructor method for EntityInfo</h3>
		 * <h3 class="zh-CN">EntityInfo私有构造方法</h3>
		 *
		 * @param binary	<span class="en">Binary status</span>
		 *                  <span class="zh-CN">二进制状态</span>
		 * @param name 		<span class="en">Entity name</span>
		 * 					<span class="zh-CN">参数名</span>
		 * @param value 	<span class="en">Entity value</span>
		 * 					<span class="zh-CN">参数值</span>
		 */
		private EntityInfo(boolean binary, String name, String value) {
			this.binary = binary;
			this.entityName = name;
			this.entityValue = value;
		}
		/**
		 * <h3 class="en">Static method for generate text EntityInfo instance</h3>
		 * <h3 class="zh-CN">静态方法用于生成文字类型的EntityInfo实例对象</h3>
		 *
		 * @param name 		<span class="en">Entity name</span>
		 * 					<span class="zh-CN">参数名</span>
		 * @param value 	<span class="en">Entity value</span>
		 * 					<span class="zh-CN">参数值</span>
		 *
		 * @return	<span class="en">Generated EntityInfo instance</span>
		 * 			<span class="zh-CN">生成的EntityInfo实例对象</span>
		 */
		public static EntityInfo generateTextEntity(String name, String value) {
			return new EntityInfo(Boolean.FALSE, name, value);
		}
		/**
		 * <h3 class="en">Static method for generate upload file EntityInfo instance</h3>
		 * <h3 class="zh-CN">静态方法用于生成二进制类型的EntityInfo实例对象</h3>
		 *
		 * @param name 		<span class="en">Entity name</span>
		 * 					<span class="zh-CN">参数名</span>
		 * @param value 	<span class="en">Upload file path</span>
		 * 					<span class="zh-CN">上传文件地址</span>
		 *
		 * @return	<span class="en">Generated EntityInfo instance</span>
		 * 			<span class="zh-CN">生成的EntityInfo实例对象</span>
		 */
		public static EntityInfo generateBinaryEntity(String name, String value) 
				throws FileNotFoundException {
			if (FileUtils.isExists(value)) {
				return new EntityInfo(Boolean.TRUE, name, value);
			}
			throw new FileNotFoundException("File not exists");
		}
		/**
		 * <h3 class="en">Getter method for binary status</h3>
		 * <h3 class="zh-CN">二进制状态的Getter方法</h3>
		 *
		 * @return 	<span class="en">Binary status</span>
		 * 			<span class="zh-CN">二进制状态</span>
		 */
		public boolean isBinary() {
			return binary;
		}
		/**
		 * <h3 class="en">Getter method for entity name</h3>
		 * <h3 class="zh-CN">参数名的Getter方法</h3>
		 *
		 * @return 	<span class="en">Entity name</span>
		 * 			<span class="zh-CN">参数名</span>
		 */
		public String getEntityName() {
			return entityName;
		}
		/**
		 * <h3 class="en">Getter method for entity value</h3>
		 * <h3 class="zh-CN">参数值的Getter方法</h3>
		 *
		 * @return 	<span class="en">Entity value</span>
		 * 			<span class="zh-CN">参数值</span>
		 */
		public String getEntityValue() {
			return entityValue;
		}
	}
}
